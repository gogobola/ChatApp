{
  "name": "micon",
  "main": "./micon",
  "version": "1.2.7",
  "homepage": "http://github.com/alexeypetrushin/miconjs",
  "devDependencies": {
    "chai": "1.3.x",
    "mocha": "1.5.x",
    "synchronize": "0.5.x"
  },
  "description": "Dependency injector",
  "keywords": [
    "DI",
    "IoC",
    "Dependency Injection"
  ],
  "author": {
    "name": "Alexey Petrushin",
    "url": "http://petrush.in"
  },
  "license": "MIT",
  "scripts": {
    "prepublish": "coffee -c micon.coffee",
    "postpublish": "rm micon.js"
  },
  "readme": "Dependency injector, assembles application.\n\nRegistering, getting and setting components.\n\n``` CoffeeScript\napp.register 'component', -> 'some component'\nconsole.log app.component\n# => some component\n\napp.component = 'another component'\nconsole.log app.component\n# => another component\n```\n\nDependencies can be specified implicitly.\n\n``` CoffeeScript\napp.register 'a', ->\n  console.log 'initializing a'\n  'a'\napp.register 'b', ->\n  console.log 'initializing b'\n  \"#{app.a} b\"\n\nconsole.log app.b\n# => initializing b\n# => initializing a\n# => a b\n```\n\nOr explicitly. The only difference with implicit approach is that explicit\ndeclaration will resolve circular dependencies (implicit approach\nwill fail).\n\n``` CoffeeScript\napp.register 'a', ->\n  console.log 'initializing a'\n  'a'\napp.register 'b', dependencies: ['a'], ->\n  console.log 'initializing b'\n  \"#{app.a} b\"\n\nconsole.log app.b\n# => initializing a\n# => initializing b\n# => a b\n```\n\nComponent lifecycle callbacks.\n\n``` CoffeeScript\napp.register 'component', ->\n  console.log 'initialization'\n  'some component'\napp.before 'component', -> console.log 'before initialization'\napp.after 'component', -> console.log 'after initialization'\n\napp.component\n# => before initialization\n# => initialization\n# => after initialization\n```\n\nScopes.\n\n``` CoffeeScript\napp.register 'params', scope: 'request', -> {}\n\nstartFiberSomehow ->\n  app.scope 'request', ->\n    app.params.key = 'some value'\n    console.log app.params\n    # => {key: 'some value'}\n```\n\nScope callbacks.\n\n``` CoffeeScript\napp.beforeScope 'request', -> console.log 'before'\napp.afterScope 'request', -> console.log 'after'\n\nstartFiberSomehow ->\n  app.scope 'request', ->\n  # => before\n  # => after\n```\n\nRequire files in directory, provide `watch: true` option to watch for changes and reload.\n\n``` CoffeeScript\n# /app/controllers/SomeController.coffee\n# app.SomeController = 'some controller'\n\napp.requireDirectory '/absolutePath/app/controllers', watch: true\n\nconsole.log app.SomeController\n# => some controller\n```\n\nLimitations.\n\n- Fiber and custom scopes will not work in browser because browsers doesn't support fibers.\n- Use `app.get componentName` instead of `app.componentName` in old browsers not supporting\ngetters and setters syntax. Use `set` for setting components.\n\nCopyright (c) Alexey Petrushin, http://petrush.in, released under the MIT license.",
  "readmeFilename": "readme.md",
  "_id": "micon@1.2.7",
  "dist": {
    "shasum": "b0058b365066133772293d4df6441c098ae47179"
  },
  "_from": "micon@1.x.x",
  "_resolved": "https://registry.npmjs.org/micon/-/micon-1.2.7.tgz"
}
